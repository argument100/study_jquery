(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
'use strict';

(function () {
  var $, Core;

  $ = function (selector, context) {
    return new Core(selector, context);
  };

  $.isArray = require('./isArray');

  $.each = require('./each');

  Core = function (selector, context) {
    var elems;
    context = context || document;
    elems = context.querySelectorAll(selector);
    Array.prototype.push.apply(this, elems);
    this.context = context;
    this.selector = selector;
    return this;
  };

  Core.prototype = {
    addClass: function addClass(cName) {
      return this.get(0).className = cName;
    },
    removeClass: function removeClass(cName) {
      console.log(this.get(0).className.split(' '));
      return this.get(0).className = this.get(0).className.replace(cName, '');
    },
    each: function each(callback) {
      var i, j, l, ref;
      i = 0;
      l = this.length;
      for (i = j = 0, ref = l; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        callback.call(this, this[i], i);
      }
    },
    get: function get(index) {
      var i, j, l, ref, ret;
      ret = [];
      l = this.length;
      for (i = j = 0, ref = l; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        ret.push(this[i]);
      }
      if (typeof index === 'number') {
        ret = ret[index];
      }
      return ret;
    },
    splice: Array.prototype.splice
  };

  window.$ = $;

  require('./test');

  return;
}).call(undefined);

//# sourceMappingURL=jquery.js.map

},{"./each":2,"./isArray":3,"./test":4}],2:[function(require,module,exports){
"use strict";

module.exports = function (obj, callback) {
  if ($.isArray(obj)) {
    var i = 0,
        l = obj.length;
    for (; i < l; i++) {
      callback(obj[i], i);
    }
  } else {
    for (var key in obj) {
      callback(key, obj[key]);
    }
  }
};

},{}],3:[function(require,module,exports){
"use strict";

module.exports = function (obj) {
  return Object.prototype.toString.call(obj) === "[object Array]";
};

},{}],4:[function(require,module,exports){
'use strict';

$.each(['a', 'b', 'c'], function (e, i) {
  console.log(e, i);
});

$.each({
  a: 'apple',
  b: 'banana',
  c: 'chocolate'
}, function (k, v) {
  console.log(k, v);
});

console.log($('body'));
console.log($('div'));
console.log($('div').get());
console.log($('div').get(0));
//$('body').addClass('hoge');
$('div').each(function (e, i) {
  console.log(e);
});

$('#e').removeClass('hoge');

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
