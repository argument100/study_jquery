(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
'use strict';

(function () {
  var $, Core, rtrim;

  $ = function (selector, context) {
    return new Core(selector, context);
  };

  $.isArray = require('./isArray');

  $.each = require('./each');

  Core = function (selector, context) {
    var elems;
    context = context || document;
    elems = context.querySelectorAll(selector);
    Array.prototype.push.apply(this, elems);
    this.context = context;
    this.selector = selector;
    return this;
  };

  rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

  Core.prototype = {
    trim: function trim(text) {
      var rtext;
      rtext = '';
      if (text !== null) {
        rtext = (text + '').replace(rtrim, '');
      }
      return rtext;
    },
    addClass: function addClass(value) {
      var cName, classArr, i, k, len;
      value = this.trim(value);
      for (k = 0, len = this.length; k < len; k++) {
        i = this[k];
        cName = this.trim(i.className);
        classArr = cName.split(' ');
        if (classArr.indexOf(value) > -1) {
          continue;
        }
        if (classArr[0] === '') {
          classArr[0] = value;
        } else {
          classArr.push(value);
        }
        i.className = classArr.length === 1 ? classArr[0] : classArr.join(' ');
      }
      return this;
    },
    removeClass: function removeClass(value) {
      var cName, classArr, i, j, k, len, len1, m, needClassArr;
      value = this.trim(value);
      for (k = 0, len = this.length; k < len; k++) {
        i = this[k];
        cName = this.trim(i.className);
        classArr = cName.split(' ');
        if (classArr.indexOf(value) === -1) {
          continue;
        }
        needClassArr = [];
        for (m = 0, len1 = classArr.length; m < len1; m++) {
          j = classArr[m];
          if (j !== value && j !== '') {
            needClassArr.push(j);
          }
        }
        i.className = needClassArr.join(' ');
      }
      return this;
    },
    toggleClass: function toggleClass(value) {
      var cName, classArr, i, k, len;
      value = this.trim(value);
      for (k = 0, len = this.length; k < len; k++) {
        i = this[k];
        cName = this.trim(i.className);
        classArr = cName.split(' ');
        if (classArr.indexOf(value) === -1) {
          this.addClass(value);
        } else {
          this.removeClass(value);
        }
      }
      return this;
    },
    hasClass: function hasClass(value) {
      var classArr, flag, i, k, len;
      value = this.trim(value);
      flag = false;
      for (k = 0, len = this.length; k < len; k++) {
        i = this[k];
        classArr = i.className.split(' ');
        if (classArr.indexOf(value) > -1) {
          flag = true;
          break;
        }
      }
      return flag;
    },
    each: function each(callback) {
      var i, k, l, ref;
      i = 0;
      l = this.length;
      for (i = k = 0, ref = l; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        callback.call(this, this[i], i);
      }
    },
    get: function get(index) {
      var i, k, l, ref, ret;
      ret = [];
      l = this.length;
      for (i = k = 0, ref = l; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        ret.push(this[i]);
      }
      if (typeof index === 'number') {
        ret = ret[index];
      }
      return ret;
    },
    splice: Array.prototype.splice
  };

  window.$ = $;

  require('./test');

  return;
}).call(undefined);

//# sourceMappingURL=jquery.js.map

},{"./each":2,"./isArray":3,"./test":4}],2:[function(require,module,exports){
"use strict";

module.exports = function (obj, callback) {
  if ($.isArray(obj)) {
    var i = 0,
        l = obj.length;
    for (; i < l; i++) {
      callback(obj[i], i);
    }
  } else {
    for (var key in obj) {
      callback(key, obj[key]);
    }
  }
};

},{}],3:[function(require,module,exports){
"use strict";

module.exports = function (obj) {
  return Object.prototype.toString.call(obj) === "[object Array]";
};

},{}],4:[function(require,module,exports){
'use strict';

$.each(['a', 'b', 'c'], function (e, i) {
  console.log(e, i);
});

$.each({
  a: 'apple',
  b: 'banana',
  c: 'chocolate'
}, function (k, v) {
  console.log(k, v);
});

console.log($('body'));
console.log($('div'));
console.log($('div').get());
console.log($('div').get(0));
//$('body').addClass('hoge');
$('div').each(function (e, i) {
  console.log(e);
});

$('#e').removeClass('hoge');

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvZmFiL0dpdGh1Yi9zdHVkeV9qcXVlcnkvc3JjL2pxdWVyeS5qcyIsIi9Vc2Vycy9mYWIvR2l0aHViL3N0dWR5X2pxdWVyeS9zcmMvZWFjaC5qcyIsIi9Vc2Vycy9mYWIvR2l0aHViL3N0dWR5X2pxdWVyeS9zcmMvaXNBcnJheS5qcyIsIi9Vc2Vycy9mYWIvR2l0aHViL3N0dWR5X2pxdWVyeS9zcmMvdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQ0NBLENBQUMsWUFBVztBQUNWLE1BQUksQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUM7O0FBRW5CLEdBQUMsR0FBRyxVQUFTLFFBQVEsRUFBRSxPQUFPLEVBQUU7QUFDOUIsV0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDcEMsQ0FBQzs7QUFFRixHQUFDLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQzs7QUFFakMsR0FBQyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7O0FBRTNCLE1BQUksR0FBRyxVQUFTLFFBQVEsRUFBRSxPQUFPLEVBQUU7QUFDakMsUUFBSSxLQUFLLENBQUM7QUFDVixXQUFPLEdBQUcsT0FBTyxJQUFJLFFBQVEsQ0FBQztBQUM5QixTQUFLLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzNDLFNBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDeEMsUUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7QUFDdkIsUUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDekIsV0FBTyxJQUFJLENBQUM7R0FDYixDQUFDOztBQUVGLE9B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IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOS4zXG4oZnVuY3Rpb24oKSB7XG4gIHZhciAkLCBDb3JlLCBydHJpbTtcblxuICAkID0gZnVuY3Rpb24oc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENvcmUoc2VsZWN0b3IsIGNvbnRleHQpO1xuICB9O1xuXG4gICQuaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4gICQuZWFjaCA9IHJlcXVpcmUoJy4vZWFjaCcpO1xuXG4gIENvcmUgPSBmdW5jdGlvbihzZWxlY3RvciwgY29udGV4dCkge1xuICAgIHZhciBlbGVtcztcbiAgICBjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcbiAgICBlbGVtcyA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcywgZWxlbXMpO1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4gIENvcmUucHJvdG90eXBlID0ge1xuICAgIHRyaW06IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgIHZhciBydGV4dDtcbiAgICAgIHJ0ZXh0ID0gXCJcIjtcbiAgICAgIGlmICh0ZXh0ICE9PSBudWxsKSB7XG4gICAgICAgIHJ0ZXh0ID0gKHRleHQgKyBcIlwiKS5yZXBsYWNlKHJ0cmltLCBcIlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBydGV4dDtcbiAgICB9LFxuICAgIGFkZENsYXNzOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGNOYW1lLCBjbGFzc0FyciwgaSwgaywgbGVuO1xuICAgICAgdmFsdWUgPSB0aGlzLnRyaW0odmFsdWUpO1xuICAgICAgZm9yIChrID0gMCwgbGVuID0gdGhpcy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgICAgICBpID0gdGhpc1trXTtcbiAgICAgICAgY05hbWUgPSB0aGlzLnRyaW0oaS5jbGFzc05hbWUpO1xuICAgICAgICBjbGFzc0FyciA9IGNOYW1lLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgaWYgKGNsYXNzQXJyLmluZGV4T2YodmFsdWUpID4gLTEpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xhc3NBcnJbMF0gPT09IFwiXCIpIHtcbiAgICAgICAgICBjbGFzc0FyclswXSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsYXNzQXJyLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGkuY2xhc3NOYW1lID0gY2xhc3NBcnIubGVuZ3RoID09PSAxID8gY2xhc3NBcnJbMF0gOiBjbGFzc0Fyci5qb2luKFwiIFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgY05hbWUsIGNsYXNzQXJyLCBpLCBqLCBrLCBsZW4sIGxlbjEsIG0sIG5lZWRDbGFzc0FycjtcbiAgICAgIHZhbHVlID0gdGhpcy50cmltKHZhbHVlKTtcbiAgICAgIGZvciAoayA9IDAsIGxlbiA9IHRoaXMubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgaSA9IHRoaXNba107XG4gICAgICAgIGNOYW1lID0gdGhpcy50cmltKGkuY2xhc3NOYW1lKTtcbiAgICAgICAgY2xhc3NBcnIgPSBjTmFtZS5zcGxpdChcIiBcIik7XG4gICAgICAgIGlmIChjbGFzc0Fyci5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBuZWVkQ2xhc3NBcnIgPSBbXTtcbiAgICAgICAgZm9yIChtID0gMCwgbGVuMSA9IGNsYXNzQXJyLmxlbmd0aDsgbSA8IGxlbjE7IG0rKykge1xuICAgICAgICAgIGogPSBjbGFzc0FyclttXTtcbiAgICAgICAgICBpZiAoaiAhPT0gdmFsdWUgJiYgaiAhPT0gXCJcIikge1xuICAgICAgICAgICAgbmVlZENsYXNzQXJyLnB1c2goaik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGkuY2xhc3NOYW1lID0gbmVlZENsYXNzQXJyLmpvaW4oXCIgXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICB0b2dnbGVDbGFzczogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBjTmFtZSwgY2xhc3NBcnIsIGksIGssIGxlbjtcbiAgICAgIHZhbHVlID0gdGhpcy50cmltKHZhbHVlKTtcbiAgICAgIGZvciAoayA9IDAsIGxlbiA9IHRoaXMubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgaSA9IHRoaXNba107XG4gICAgICAgIGNOYW1lID0gdGhpcy50cmltKGkuY2xhc3NOYW1lKTtcbiAgICAgICAgY2xhc3NBcnIgPSBjTmFtZS5zcGxpdChcIiBcIik7XG4gICAgICAgIGlmIChjbGFzc0Fyci5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHtcbiAgICAgICAgICB0aGlzLmFkZENsYXNzKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBoYXNDbGFzczogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBjbGFzc0FyciwgZmxhZywgaSwgaywgbGVuO1xuICAgICAgdmFsdWUgPSB0aGlzLnRyaW0odmFsdWUpO1xuICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgZm9yIChrID0gMCwgbGVuID0gdGhpcy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgICAgICBpID0gdGhpc1trXTtcbiAgICAgICAgY2xhc3NBcnIgPSBpLmNsYXNzTmFtZS5zcGxpdChcIiBcIik7XG4gICAgICAgIGlmIChjbGFzc0Fyci5pbmRleE9mKHZhbHVlKSA+IC0xKSB7XG4gICAgICAgICAgZmxhZyA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmbGFnO1xuICAgIH0sXG4gICAgZWFjaDogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHZhciBpLCBrLCBsLCByZWY7XG4gICAgICBpID0gMDtcbiAgICAgIGwgPSB0aGlzLmxlbmd0aDtcbiAgICAgIGZvciAoaSA9IGsgPSAwLCByZWYgPSBsOyAwIDw9IHJlZiA/IGsgPD0gcmVmIDogayA+PSByZWY7IGkgPSAwIDw9IHJlZiA/ICsrayA6IC0taykge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIHRoaXNbaV0sIGkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgdmFyIGksIGssIGwsIHJlZiwgcmV0O1xuICAgICAgcmV0ID0gW107XG4gICAgICBsID0gdGhpcy5sZW5ndGg7XG4gICAgICBmb3IgKGkgPSBrID0gMCwgcmVmID0gbDsgMCA8PSByZWYgPyBrIDw9IHJlZiA6IGsgPj0gcmVmOyBpID0gMCA8PSByZWYgPyArK2sgOiAtLWspIHtcbiAgICAgICAgcmV0LnB1c2godGhpc1tpXSk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXQgPSByZXRbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuICAgIHNwbGljZTogQXJyYXkucHJvdG90eXBlLnNwbGljZVxuICB9O1xuXG4gIHdpbmRvdy4kID0gJDtcblxuICByZXF1aXJlKCcuL3Rlc3QnKTtcblxuICByZXR1cm47XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpxdWVyeS5qcy5tYXBcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaiwgY2FsbGJhY2spIHtcbiAgaWYgKCQuaXNBcnJheShvYmopKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBsID0gb2JqLmxlbmd0aDtcbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgY2FsbGJhY2sob2JqW2ldLCBpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgY2FsbGJhY2soa2V5LCBvYmpba2V5XSk7XG4gICAgfVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSBcIltvYmplY3QgQXJyYXldXCI7XG59XG4iLCIkLmVhY2goWydhJywgJ2InLCAnYyddLCBmdW5jdGlvbiAoZSwgaSkge1xuICBjb25zb2xlLmxvZyhlLCBpKTtcbn0pO1xuXG4kLmVhY2goe1xuICBhOiAnYXBwbGUnLFxuICBiOiAnYmFuYW5hJyxcbiAgYzogJ2Nob2NvbGF0ZSdcbn0sIChrLCB2KSA9PiB7XG4gIGNvbnNvbGUubG9nKGssIHYpO1xufSk7XG5cbmNvbnNvbGUubG9nKCQoJ2JvZHknKSk7XG5jb25zb2xlLmxvZygkKCdkaXYnKSk7XG5jb25zb2xlLmxvZygkKCdkaXYnKS5nZXQoKSk7XG5jb25zb2xlLmxvZygkKCdkaXYnKS5nZXQoMCkpO1xuLy8kKCdib2R5JykuYWRkQ2xhc3MoJ2hvZ2UnKTtcbiQoJ2RpdicpLmVhY2goZnVuY3Rpb24gKGUsIGkpIHtcbiAgY29uc29sZS5sb2coZSk7XG59KTtcblxuJChcIiNlXCIpLnJlbW92ZUNsYXNzKFwiaG9nZVwiKTsiXX0=
